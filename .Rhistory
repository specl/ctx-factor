layout(matrix(nrow=3,ncol=3,1:9,
byrow=T))
myCorPlot(obsCor,main="A. Observed")
propVar=enkaviDecomp(stdEig)
cm=apply(propVar,c(1,3,4),mean)
myCorPlot(cm[1,,],main="B. Model")
myCorPlot(cm[2,,],main="C. Factor 1")
myCorPlot(cm[3,,],main="D. Factor 2")
myCorPlot(cm[4,,],main="E. Factor 3")
myCorPlot(cm[5,,],main="F. Residual")
par(mar=c(4,4,1,1),mgp=c(2,1,0),cex=1)
temp1=apply(propVar,1:2,function(x) sum(diag(x)))
propVarPost=temp1[2:5,]/temp1[1,]
plot(density(propVarPost[1,]),xlim=c(0,1),col=mycol[1],lwd=2
,main="",xlab="Proportion of Variance")
lines(density(propVarPost[2,]),col=mycol[2],lwd=2)
lines(density(propVarPost[3,]),col=mycol[3],lwd=2)
lines(density(propVarPost[4,]),col=mycol[4],lwd=2)
mtext(side=3,adj=0,"G")
par(mar=c(0,0,1,4))
plot.new()
legend("topleft",legend=c("Fac 1","Fac 2","Fac 3","Residual"),
lwd=2,col=mycol[1:4])
par(mar=c(4,4,1,1))
q=apply(stdEig$rho,2:3,quantile,p=c(.025,.5,.975))
upperTri <- lapply(1:dim(q)[1], function(i) {
mat <- q[i, , ]
mat[upper.tri(mat)]  # Returns just the upper triangle values
})
med=upperTri[[2]]
o=order(med)
lo=upperTri[[1]]
hi=upperTri[[3]]
lim=c(min(lo,-.2),max(hi,.7))
plot(med[o],ylim=lim,typ='n',axes=F,
ylab="Correlation  Value",xlab="Correlation Index")
n=length(o)
arrows(1:n,lo[o],1:n,hi[o],code=3,angle=90,length = .05)
points(med[o],pch=21,bg='gold',cex=1)
axis(1,at=c(1,n))
axis(2)
abline(h=0,lty=2)
mtext(side=3,adj=0,"H")
source('facExtra.R')
source('enkavi.R')
samples=fitEnkavi(dat,priorRT,numFactors=3)
saveRDS(file='enkaviMod.Rds',samples)
samples=readRDS('enkaviMod.Rds') #varimax
eigMax=eigenMax(samples)
stdVM=standardize(samples)
stdEig=standardize(eigMax)
eigMax=eigenMax(samples)
stdVM=standardize(samples)
stdEig=standardize(eigMax)
source('enkavi.R')
dat=readRDS("enkavi6Task.Rds")
J= length(unique(dat$task))
priorCov=list(
"mu.m"=70,
"mu.s"=100,
"alpha.m"=1000,
"alpha.s"=1000,
"tau.s"=200,
"S"=rep(40,J)
)
samplesCov=fitEnkaviCov(dat=dat,prior=priorCov)
saveRDS(file="enkaviCov.Rds",samplesCov)
samplesCov=readRDS("enkaviCov.Rds")
rho=samplesCov$Sigma
M=dim(rho)[1]
for (m in 1:M) rho[m,,]=cov2cor(solve(samplesCov$Sigma[m,,]))
source('enkavi.R')
saveRDS(file="enkavi1F.Rds",fitEnkavi(dat,priorRT,1))
saveRDS(file="enkavi2F.Rds",fitEnkavi(dat,priorRT,2))
std1F=standardize(readRDS('enkavi1F.Rds'))
std2F=standardize(readRDS('enkavi2F.Rds'))
par(mfrow=c(1,4))
myCorPlot(apply(std1F$rho,2:3,mean),main="A. One Factor")
myCorPlot(apply(std2F$rho,2:3,mean),main="B. Two Factor")
myCorPlot(apply(stdEig$rho,2:3,mean),main="C. Three Factor")
myCorPlot(apply(rho,2:3,mean),main="D. Unconstrainted")
source('enkavi.R')
layout(matrix(nrow=3,ncol=3,1:9,
byrow=T))
myCorPlot(obsCor,main="A. Observed")
propVar=enkaviDecomp(stdEig)
cm=apply(propVar,c(1,3,4),mean)
myCorPlot(cm[1,,],main="B. Model")
myCorPlot(cm[2,,],main="C. Factor 1")
myCorPlot(cm[3,,],main="D. Factor 2")
myCorPlot(cm[4,,],main="E. Factor 3")
myCorPlot(cm[5,,],main="F. Residual")
par(mar=c(4,4,1,1),mgp=c(2,1,0),cex=1)
temp1=apply(propVar,1:2,function(x) sum(diag(x)))
propVarPost=temp1[2:5,]/temp1[1,]
plot(density(propVarPost[1,]),xlim=c(0,1),col=mycol[1],lwd=2
,main="",xlab="Proportion of Variance")
lines(density(propVarPost[2,]),col=mycol[2],lwd=2)
lines(density(propVarPost[3,]),col=mycol[3],lwd=2)
lines(density(propVarPost[4,]),col=mycol[4],lwd=2)
mtext(side=3,adj=0,"G")
par(mar=c(0,0,1,4))
plot.new()
legend("topleft",legend=c("Fac 1","Fac 2","Fac 3","Residual"),
lwd=2,col=mycol[1:4])
par(mar=c(4,4,1,1))
q=apply(stdEig$rho,2:3,quantile,p=c(.025,.5,.975))
upperTri <- lapply(1:dim(q)[1], function(i) {
mat <- q[i, , ]
mat[upper.tri(mat)]  # Returns just the upper triangle values
})
med=upperTri[[2]]
o=order(med)
lo=upperTri[[1]]
hi=upperTri[[3]]
lim=c(min(lo,-.2),max(hi,.7))
plot(med[o],ylim=lim,typ='n',axes=F,
ylab="Correlation  Value",xlab="Correlation Index")
n=length(o)
arrows(1:n,lo[o],1:n,hi[o],code=3,angle=90,length = .05)
points(med[o],pch=21,bg='gold',cex=1)
axis(1,at=c(1,n))
axis(2)
abline(h=0,lty=2)
mtext(side=3,adj=0,"H")
source('iBat5.R')
source('facMod.R')
priorIll=list(
"mu.m"=1,
"mu.s"=3,
"tuneDelta"=1,
"tuneLambda"=1,
"tuneTau"=1)
# samples=fitiBat5(dat,prior=priorIll)
# saveRDS(file="iBat5.Rds",samples)
samples=readRDS("iBat5.Rds")
std=standardize(samples)
source('iBat5.R')
par(mfrow=c(1,3))
br(yc=.7,dir=1)
br(yc=.3,dir=-1,add=T)
mtext(side=3,adj=0,"A",cex=1.2,line=0)
zol()
mtext(side=3,adj=0,"B",cex=1.2,line=0)
dat=loadiBat5('iBat5.csv')
scores=tapply(dat$y,list(dat$sub,dat$task),mean)
myCorPlot(cor(scores))
mtext(side=3,adj=0,"C",cex=1.2,line=0)
source('iBat5.R')
source('facMod.R')
priorIll=list(
"mu.m"=1,
"mu.s"=3,
"tuneDelta"=1,
"tuneLambda"=1,
"tuneTau"=1)
samples=fitiBat5(dat,prior=priorIll)
saveRDS(file="iBat5.Rds",samples)
samples=readRDS("iBat5.Rds")
std=standardize(samples)
source('iBat5.R')
propVar=iBat5decomp(std)
set.seed(123)
source('intro.R')
truth=makeTruth(I=200,J=8,trialNoise=200)
saveRDS(file="run2Truth.Rds",truth)
dat=makeData(truth,L=100)
write.table(file="run2Dat.txt",dat,quote=F,row.names = F)
priorRT=list(
"mu.m"=70,
"mu.s"=100,
"alpha.m"=1000,
"alpha.s"=1000,
"tuneDelta"=25,
"tuneLambda"=25,
"tuneTau"=200)
#orig=facH.run(dat,numFactors = 2,prior=priorRT,M=5000)$BUGSoutput$sims.list
#saveRDS(object=orig,file="run2Mod.Rds")
# samples=readRDS("run2Mod.Rds")
if (file.exists("run2Mod.Rds")) {
message("Loading existing model from file.")
samples <- readRDS("run2Mod.Rds")
} else {
message("File not found. Running model...")
orig <- facH.run(dat, numFactors = 2, prior = priorRT, M = 5000)$BUGSoutput$sims.list
saveRDS(orig, file = "run2Mod.Rds")
samples <- orig
}
source('iBat5.R')
source('facMod.R')
priorIll=list(
"mu.m"=1,
"mu.s"=3,
"tuneDelta"=1,
"tuneLambda"=1,
"tuneTau"=1)
# samples=fitiBat5(dat,prior=priorIll)
# saveRDS(file="iBat5.Rds",samples)
# samples=readRDS("iBat5.Rds")
# runwrapper_iBat5.R
if (file.exists("iBat5.Rds")) {
message("Loading existing model from file.")
samples = readRDS("iBat5.Rds")
} else {
message("File not found. Running model...")
samples = fitiBat5(dat, prior = priorIll)
saveRDS(samples, file = "iBat5.Rds")
}
std=standardize(samples)
par(mfrow=c(1,2),mar=c(4,4,2,2),mgp=c(2,1,0))
temp1=apply(propVar,1:2,function(x) sum(diag(x)))
propVarPost=temp1[2:5,]/temp1[1,]
plot(density(propVarPost[3,]),xlim=c(0,.5),col=mycol[3],lwd=2
,main="",xlab="Proportion of Variance")
lines(density(propVarPost[4,]),col=mycol[4],lwd=2)
lines(density(propVarPost[2,]),col=mycol[2],lwd=2)
lines(density(propVarPost[1,]),col=mycol[1],lwd=2)
legend("topright",legend=c("Nuisance","Fac 6","Fac 7","Residual"),
lwd=2,col=mycol[1:4],bty='n')
mtext(side=3,adj=0,cex=1.2,"A")
withinIllusion=c(1,6,15,28,45)
q=apply(std$rho,2:3,quantile,p=c(.025,.5,.975))
upperTri <- lapply(1:dim(q)[1], function(i) {
mat <- q[i, , ]
mat[upper.tri(mat)]  # Returns just the upper triangle values
})
betweenIllusion=!(1:45 %in% withinIllusion)
med=upperTri[[2]][betweenIllusion]
o=order(med)
lo=upperTri[[1]][betweenIllusion]
hi=upperTri[[3]][betweenIllusion]
lim=c(min(lo,-.2),max(hi,.7))
plot(med[o],ylim=lim,typ='n',axes=F,
ylab="Correlation  Value",xlab="Correlation Index")
n=length(o)
arrows(1:n,lo[o],1:n,hi[o],code=3,angle=90,length = .05)
points(med[o],pch=21,bg='gold',cex=1)
mtext(side=3,adj=0,cex=1.2,"B")
axis(2)
axis(1,at=c(1,n))
source('facExtra.R')
source('enkavi.R')
# samples=fitEnkavi(dat,priorRT,numFactors=3)
# saveRDS(file='enkaviMod.Rds',samples)
# samples=readRDS('enkaviMod.Rds') #varimax
if (file.exists("enkaviMod.Rds")) {
message("Loading existing model from file.")
samples = readRDS("enkaviMod.Rds")  # varimax
} else {
message("File not found. Running model...")
samples = fitEnkavi(dat, priorRT, numFactors = 3)
saveRDS(samples, file = "enkaviMod.Rds")
}
eigMax=eigenMax(samples)
stdVM=standardize(samples)
stdEig=standardize(eigMax)
pLamEig=apply(eigMax$lambda,2:3,mean)
longNames=c("Flanker","Global/Local","Negative Priming","Simon","Stroop","Task Switching")
tab=cbind(longNames,round(pLamEig,0))
colnames(tab)=c("Task","Factor 1 (ms)","Factor 2 (ms)","Factor 3 (ms)")
apa_table(tab,
caption="Factor Loadings For EFA Model of Cognitive Control")
source('enkavi.R')
dat=readRDS("enkavi6Task.Rds")
J= length(unique(dat$task))
priorCov=list(
"mu.m"=70,
"mu.s"=100,
"alpha.m"=1000,
"alpha.s"=1000,
"tau.s"=200,
"S"=rep(40,J)
)
#samplesCov=fitEnkaviCov(dat=dat,prior=priorCov)
#saveRDS(file="enkaviCov.Rds",samplesCov)
# samplesCov=readRDS("enkaviCov.Rds")
if (file.exists("enkaviCov.Rds")) {
message("Loading existing model from file.")
samplesCov = readRDS("enkaviCov.Rds")
} else {
message("File not found. Running model...")
samplesCov = fitEnkaviCov(dat = dat, prior = priorCov)
saveRDS(samplesCov, file = "enkaviCov.Rds")
}
rho=samplesCov$Sigma
M=dim(rho)[1]
for (m in 1:M) rho[m,,]=cov2cor(solve(samplesCov$Sigma[m,,]))
source('enkavi.R')
#saveRDS(file="enkavi1F.Rds",fitEnkavi(dat,priorRT,1))
#saveRDS(file="enkavi2F.Rds",fitEnkavi(dat,priorRT,2))
std1F=standardize(readRDS('enkavi1F.Rds'))
std2F=standardize(readRDS('enkavi2F.Rds'))
source('enkavi.R')
dat=readRDS("enkavi6Task.Rds")
J= length(unique(dat$task))
priorCov=list(
"mu.m"=70,
"mu.s"=100,
"alpha.m"=1000,
"alpha.s"=1000,
"tau.s"=200,
"S"=rep(40,J)
)
#samplesCov=fitEnkaviCov(dat=dat,prior=priorCov)
#saveRDS(file="enkaviCov.Rds",samplesCov)
# samplesCov=readRDS("enkaviCov.Rds")
if (file.exists("enkaviCov.Rds")) {
message("Loading existing model from file.")
samplesCov = readRDS("enkaviCov.Rds")
} else {
message("File not found. Running model...")
samplesCov = fitEnkaviCov(dat = dat, prior = priorCov)
saveRDS(samplesCov, file = "enkaviCov.Rds")
}
rho=samplesCov$Sigma
M=dim(rho)[1]
for (m in 1:M) rho[m,,]=cov2cor(solve(samplesCov$Sigma[m,,]))
source('enkavi.R')
#saveRDS(file="enkavi1F.Rds",fitEnkavi(dat,priorRT,1))
#saveRDS(file="enkavi2F.Rds",fitEnkavi(dat,priorRT,2))
std1F=standardize(readRDS('enkavi1F.Rds'))
std2F=standardize(readRDS('enkavi2F.Rds'))
source('enkavi.R')
dat=readRDS("enkavi6Task.Rds")
J= length(unique(dat$task))
priorCov=list(
"mu.m"=70,
"mu.s"=100,
"alpha.m"=1000,
"alpha.s"=1000,
"tau.s"=200,
"S"=rep(40,J)
)
#samplesCov=fitEnkaviCov(dat=dat,prior=priorCov)
#saveRDS(file="enkaviCov.Rds",samplesCov)
# samplesCov=readRDS("enkaviCov.Rds")
if (file.exists("enkaviCov.Rds")) {
message("Loading existing model from file.")
samplesCov = readRDS("enkaviCov.Rds")
} else {
message("File not found. Running model...")
samplesCov = fitEnkaviCov(dat = dat, prior = priorCov)
saveRDS(samplesCov, file = "enkaviCov.Rds")
}
rho=samplesCov$Sigma
M=dim(rho)[1]
for (m in 1:M) rho[m,,]=cov2cor(solve(samplesCov$Sigma[m,,]))
source('enkavi.R')
# #saveRDS(file="enkavi1F.Rds",fitEnkavi(dat,priorRT,1))
# #saveRDS(file="enkavi2F.Rds",fitEnkavi(dat,priorRT,2))
# std1F=standardize(readRDS('enkavi1F.Rds'))
# std2F=standardize(readRDS('enkavi2F.Rds'))
if (file.exists("newModel.Rds")) {
message("Loading existing model from file.")
samplesNew = readRDS("newModel.Rds")
} else {
message("File not found. Running model...")
samplesNew = fitNewModel(dat = dat, prior = priorNew)
saveRDS(samplesNew, file = "newModel.Rds")
}
source('enkavi.R')
dat=readRDS("enkavi6Task.Rds")
J= length(unique(dat$task))
priorCov=list(
"mu.m"=70,
"mu.s"=100,
"alpha.m"=1000,
"alpha.s"=1000,
"tau.s"=200,
"S"=rep(40,J)
)
#samplesCov=fitEnkaviCov(dat=dat,prior=priorCov)
#saveRDS(file="enkaviCov.Rds",samplesCov)
# samplesCov=readRDS("enkaviCov.Rds")
if (file.exists("enkaviCov.Rds")) {
message("Loading existing model from file.")
samplesCov = readRDS("enkaviCov.Rds")
} else {
message("File not found. Running model...")
samplesCov = fitEnkaviCov(dat = dat, prior = priorCov)
saveRDS(samplesCov, file = "enkaviCov.Rds")
}
rho=samplesCov$Sigma
M=dim(rho)[1]
for (m in 1:M) rho[m,,]=cov2cor(solve(samplesCov$Sigma[m,,]))
source('enkavi.R')
#saveRDS(file="enkavi1F.Rds",fitEnkavi(dat,priorRT,1))
#saveRDS(file="enkavi2F.Rds",fitEnkavi(dat,priorRT,2))
# std1F=standardize(readRDS('enkavi1F.Rds'))
# std2F=standardize(readRDS('enkavi2F.Rds'))
if (file.exists("enkavi1F.Rds")) {
message("Loading 1-factor model.")
std1F = standardize(readRDS("enkavi1F.Rds"))
} else {
message("Running 1-factor model...")
fit1F = fitEnkavi(dat, priorRT, 1)
saveRDS(fit1F, file = "enkavi1F.Rds")
std1F = standardize(fit1F)
}
if (file.exists("enkavi2F.Rds")) {
message("Loading 2-factor model.")
std2F = standardize(readRDS("enkavi2F.Rds"))
} else {
message("Running 2-factor model...")
fit2F = fitEnkavi(dat, priorRT, 2)
saveRDS(fit2F, file = "enkavi2F.Rds")
std2F = standardize(fit2F)
}
dat=readRDS("enkavi6Task.Rds")
priorRTa=list(
"mu.m"=70,
"mu.s"=100,
"alpha.m"=1000,
"alpha.s"=1000,
"tuneDelta"=40,
"tuneLambda"=10,
"tuneTau"=200)
priorRTb=list(
"mu.m"=70,
"mu.s"=100,
"alpha.m"=1000,
"alpha.s"=1000,
"tuneDelta"=10,
"tuneLambda"=40,
"tuneTau"=200)
#saveRDS(file="enkaviPriorA.Rds",
#        fitEnkavi(dat,priorRTa,numFactors=3))
#saveRDS(file="enkaviPriorB.Rds",
#        fitEnkavi(dat,priorRTb,numFactors=3))
# e=list()
# e$base=standardize(readRDS('enkaviMod.Rds'))
# e$a=standardize(readRDS('enkaviPriorA.Rds'))
# e$b=standardize(readRDS('enkaviPriorB.Rds'))
# runwrapper_enkaviPriors.R
e = list()
# Base model
if (file.exists("enkaviMod.Rds")) {
message("Loading base model.")
e$base = standardize(readRDS("enkaviMod.Rds"))
} else {
message("Running base model...")
fitBase = fitEnkavi(dat, priorRT, numFactors = 3)
saveRDS(fitBase, file = "enkaviMod.Rds")
e$base = standardize(fitBase)
}
# Prior A
if (file.exists("enkaviPriorA.Rds")) {
message("Loading prior A model.")
e$a = standardize(readRDS("enkaviPriorA.Rds"))
} else {
message("Running prior A model...")
fitA = fitEnkavi(dat, priorRTa, numFactors = 3)
saveRDS(fitA, file = "enkaviPriorA.Rds")
e$a = standardize(fitA)
}
# Prior B
if (file.exists("enkaviPriorB.Rds")) {
message("Loading prior B model.")
e$b = standardize(readRDS("enkaviPriorB.Rds"))
} else {
message("Running prior B model...")
fitB = fitEnkavi(dat, priorRTb, numFactors = 3)
saveRDS(fitB, file = "enkaviPriorB.Rds")
e$b = standardize(fitB)
}
source('iBat5.R')
dat=loadiBat5('iBat5.csv')
priorIlla=priorIllb=priorIll
priorIlla$tuneLambda=.5
priorIlla$tuneDelta=2
priorIllb$tuneLambda=2
priorIllb$tuneDelta=.5
#saveRDS(file="iBat5PriorA.Rds",
#        fitiBat5(dat,priorIlla))
#saveRDS(file="iBat5PriorB.Rds",
#        fitiBat5(dat,priorIllb))
# v=list()
# v$base=standardize(readRDS("iBat5.Rds"))
# v$a=standardize(readRDS("iBat5PriorA.Rds"))
# v$b=standardize(readRDS("iBat5PriorB.Rds"))
# runwrapper_iBat5Priors.R
v = list()
# Base model
if (file.exists("iBat5.Rds")) {
message("Loading base model.")
v$base = standardize(readRDS("iBat5.Rds"))
} else {
message("Running base model...")
fitBase = fitiBat5(dat, priorIll)
saveRDS(fitBase, file = "iBat5.Rds")
v$base = standardize(fitBase)
}
# Prior A
if (file.exists("iBat5PriorA.Rds")) {
message("Loading prior A model.")
v$a = standardize(readRDS("iBat5PriorA.Rds"))
} else {
message("Running prior A model...")
fitA = fitiBat5(dat, priorIlla)
saveRDS(fitA, file = "iBat5PriorA.Rds")
v$a = standardize(fitA)
}
# Prior B
if (file.exists("iBat5PriorB.Rds")) {
message("Loading prior B model.")
v$b = standardize(readRDS("iBat5PriorB.Rds"))
} else {
message("Running prior B model...")
fitB = fitiBat5(dat, priorIllb)
saveRDS(fitB, file = "iBat5PriorB.Rds")
v$b = standardize(fitB)
}
